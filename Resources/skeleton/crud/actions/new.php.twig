    /**
{% block phpdoc_method_header %}
     * Creates a new {{ entity }} entity.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% include 'skeleton/crud/actions/security.php.twig' %}
     * @ApiDoc(
     *   section = "{{ entity }}s",
     *   description = "Create new {{ entity_singularized }}.",
     *   parameters={
{% for field, params in fields %}
{% if 'id' != field and 'created' not in field and 'updated' not in field %}
     *       {"name"="{{ field }}", "dataType"="{% if 'boolean' == params['type'] %}integer{% else %}{{ params['type'] }}{% endif %}", "required"={% if params['nullable'] is defined and true == params['nullable'] %}false{% else %}true{% endif %}},
{% endif %}
{% endfor %}
     *   },
     *   statusCodes = {
     *     201 = "New {{ entity_singularized }} was created.",
     *     401 = "Authentication failure, user does not have permission or API token is invalid or outdated.",
     *   }
     * )
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function post{{ entity }}Action(Request $request)
{% endblock method_definition %}
    {
{% block method_body %}
        try {
            ${{ entity_singularized }} = $this->get('app.api_{{ entity_singularized }}_handler')->post(
                $request->request->all()
            );

{% endblock method_body %}
{% block method_return %}
            $view = $this->view(
                array(),
                Response::HTTP_CREATED,
                array(
                    'Location' => $this->generateUrl('get_{{ entity_singularized }}', array('id' => ${{ entity_singularized }}->getId()), UrlGeneratorInterface::ABSOLUTE_URL)
                )
            );
        } catch (InvalidFormException $exception) {
            $view = $this->view($exception->getForm(), Response::HTTP_BAD_REQUEST);
        }

        return $this->handleView($view);
{% endblock method_return %}
    }
